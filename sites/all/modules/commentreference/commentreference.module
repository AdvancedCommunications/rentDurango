<?php
// $Id: commentreference.module,v 1.1.4.9 2009/10/20 18:41:47 swentel Exp $

/**
 * @file
 * Defines a field type for referencing a comment - 80 % Based on user and node reference module.
 *
 * @author Kristof De Jaeger - http://drupal.org/user/107403 - http://realize.be
 * @version this is the drupal 6.x version
 */

/**
 * Implementation of hook_menu().
 */
function commentreference_menu() {
  $items = array();
  $items['commentreference/autocomplete'] = array(
    'title' => t('Commentreference autocomplete'),
    'page callback' => 'commentreference_autocomplete',
    'access arguments' => array('access comments'),
    'type' => MENU_CALLBACK
  );
  return $items;
}

/**
 * Implementation of hook_theme().
 */
function commentreference_theme() {
  return array(
    'commentreference_item_simple' => array(
      'arguments' => array('item' => NULL),
    ),
    'commentreference_select' => array(
      'arguments' => array('element' => NULL),
    ),
    'commentreference_autocomplete' => array(
      'arguments' => array('element' => NULL),
    ),
    'commentreference_formatter_default' => array(
      'arguments' => array('element'),
    ),
  );
}

/**
 * Implementation of hook_field_info().
 *
 * Here we indicate that the content module will use its default
 * handling for the view of this field.
 *
 * Callbacks can be omitted if default handing is used.
 * They're included here just so this module can be used
 * as an example for custom modules that might do things
 * differently.
 */
function commentreference_field_info() {
  return array(
    'commentreference' => array(
      'label' => t('Comment Reference'),
      'description' => t('Store the id of a related comment as an integer value.'),
      'callbacks' => array(
        'tables' => CONTENT_CALLBACK_DEFAULT,
        'arguments' => CONTENT_CALLBACK_DEFAULT,
        ),
      ),
  );
}

/**
 * Implementation of hook_field_settings().
 */
function commentreference_field_settings($op, $field) {
  switch ($op) {
    case 'form':
      $form['extra'] = array(
        '#type' => 'fieldset',
        '#title' => t('Extra settings'),
      );
      $form['extra']['comments_from_node'] = array(
        '#type' => 'checkbox',
        '#title' => t('Only select comments associated with the node.'),
        '#default_value' => isset($field['comments_from_node']) ? $field['comments_from_node'] : '',
      );
      $form['extra']['comments_limit'] = array(
        '#type' => 'textfield',
        '#size' => 4,
        '#title' => t('Time limit'),
        '#required' => TRUE,
        '#default_value' => isset($field['comments_limit']) ? $field['comments_limit'] : '0',
        '#description' => t('Limit to last x days. Leave 0 to have no limit.')
      );
      $form['extra']['comments_order'] = array(
        '#type' => 'select',
        '#title' => t('Selection order'),
        '#options' => array('0' => t('Alphabetically'), '1' => t('Newest comments first'), t('Oldest comments first')),
        '#default_value' => isset($field['comments_order']) ? $field['comments_order'] : '0',
      );
      $form['extra']['comments_status'] = array(
        '#type' => 'select',
        '#title' => t('Status'),
        '#options' => array('0' => t('Only published'), '1' => t('Only unpublished'), '2' => t('All comments')),
        '#default_value' => isset($field['comments_status']) ? $field['comments_status'] : '0',
      );
      return $form;

    case 'save':
      return array(
        'comments_from_node',
        'comments_limit',
        'comments_order',
        'comments_status'
      );

    case 'database columns':
      $columns = array(
        'cid' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => FALSE),
      );
      return $columns;
  }
}

/**
 * Implementation of hook_field().
 */
function commentreference_field($op, &$node, $field, &$items, $teaser, $page) {
  switch ($op) {
    case 'validate':
      $comments_from_node = ($field['comments_from_node'] == '1') ? 'node' : 'all';
      $comments_limit = (isset($field['comments_limit'])) ? $field['comments_limit'] : '0';
      $comments_order = (isset($field['comments_order'])) ? $field['comments_order'] : '0';
      $comments_status = (isset($field['comments_status'])) ? $field['comments_status'] : '0';
      $nid = arg(1);
      $refs = _commentreference_potential_references($comments_from_node, $node->nid, $comments_limit, $comments_order, $comments_status, $field, TRUE);
      foreach ($items as $delta => $item) {
        if (is_array($item) && !empty($item['error_field'])) {
          $error_field = $item['error_field'];
          unset($item['error_field']);
          if (!empty($item['cid'])) {
            if (!in_array($item['cid'], array_keys($refs))) {
              form_set_error($error_field, t('%name : This post can\'t be referenced.', array('%name' => t($field['widget']['label']))));
            }
          }
        }
      }
      return $items;
  }
}

/**
 * Implementation of hook_content_is_empty().
 */
function commentreference_content_is_empty($item, $field) {
  if (empty($item['cid'])) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implementation of hook_field_formatter_info().
 */
function commentreference_field_formatter_info() {
  return array(
    'default' => array(
      'label' => t('Title (link)'),
      'field types' => array('commentreference'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
    'plain' => array(
      'label' => t('Title (no link)'),
      'field types' => array('commentreference'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
  );
}

/**
 * Theme function for 'default' nodereference field formatter.
 */
function theme_commentreference_formatter_default($element) {
  $output = '';
  if (!empty($element['#item']['cid']) && is_numeric($element['#item']['cid']) && ($title = _commentreference_titles($element['#item']['cid']))) {
    $referenced_comment = _comment_load($element['#item']['cid']);
    $output = l($referenced_comment->subject, 'node/'. $referenced_comment->nid, array('fragment' => 'comment-'. $referenced_comment->cid)) .' - '. t('@time ago', array('@time' => format_interval(time() - $referenced_comment->timestamp)));
  }
  return $output;
}

/**
 * Theme function for 'plain' nodereference field formatter.
 */
function theme_commentreference_formatter_plain($element) {
  $output = '';
  if (!empty($element['#item']['cid']) && is_numeric($element['#item']['cid']) && ($title = _commentreference_titles($element['#item']['cid']))) {
    $output = check_plain($title);
  }
  return $output;
}

/**
 * Helper function for formatters.
 *
 * Store node titles collected in the curent request.
 */
function _commentreference_titles($cid, $known_title = NULL) {
  static $titles = array();
  if (!isset($titles[$cid])) {
    $title = $known_title ? $known_title : db_result(db_query("SELECT subject FROM {comments} WHERE cid=%d", $cid));
    $titles[$cid] = $title ? $title : '';
  }
  return $titles[$cid];
}

/**
 * Implementation of hook_widget_info().
 *
 * We need custom handling of multiple values for the commentreference_select
 * widget because we need to combine them into a options list rather
 * than display multiple elements.
 *
 * We will use the content module's default handling for default value.
 *
 * Callbacks can be omitted if default handing is used.
 * They're included here just so this module can be used
 * as an example for custom modules that might do things
 * differently.
 */
function commentreference_widget_info() {
  return array(
    'commentreference_select' => array(
      'label' => t('Select List'),
      'field types' => array('commentreference'),
      'multiple values' => CONTENT_HANDLE_MODULE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
    'commentreference_autocomplete' => array(
      'label' => t('Autocomplete Text Field'),
      'field types' => array('commentreference'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
  );
}

/**
 * Implementation of FAPI hook_elements().
 *
 * Any FAPI callbacks needed for individual widgets can be declared here,
 * and the element will be passed to those callbacks for processing.
 *
 * Drupal will automatically theme the element using a theme with
 * the same name as the hook_elements key.
 *
 * Autocomplete_path is not used by text_widget but other widgets can use it
 * (see nodereference and userreference).
 */
function commentreference_elements() {
  return array(
    'commentreference_select' => array(
      '#input' => TRUE,
      '#columns' => array('uid'), '#delta' => 0,
      '#process' => array('commentreference_select_process'),
      ),
    'commentreference_autocomplete' => array(
      '#input' => TRUE,
      '#columns' => array('name'), '#delta' => 0,
      '#process' => array('commentreference_autocomplete_process'),
      '#autocomplete_path' => FALSE,
      ),
    );
}

/**
 * Implementation of hook_widget().
 *
 * Attach a single form element to the form. It will be built out and
 * validated in the callback(s) listed in hook_elements. We build it
 * out in the callbacks rather than here in hook_widget so it can be
 * plugged into any module that can provide it with valid
 * $field information.
 *
 * Content module will set the weight, field name and delta values
 * for each form element. This is a change from earlier CCK versions
 * where the widget managed its own multiple values.
 *
 * If there are multiple values for this field, the content module will
 * call this function as many times as needed.
 *
 * @param $form
 *   the entire form array, $form['#node'] holds node information
 * @param $form_state
 *   the form_state, $form_state['values'][$field['field_name']]
 *   holds the field's form values.
 * @param $field
 *   the field array
 * @param $items
 *   array of default values for this field
 * @param $delta
 *   the order of this item in the array of subelements (0, 1, 2, etc)
 *
 * @return
 *   the form item for a single element for this field
 */
function commentreference_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  switch ($field['widget']['type']) {
    case 'commentreference_select':
      $element = array(
        '#type' => 'commentreference_select',
        '#default_value' => $items,
      );
      break;
    case 'commentreference_autocomplete':
      $comments_from_node = ($field['comments_from_node'] == '1') ? 'node' : 'all';
      $comments_limit = (isset($field['comments_limit'])) ? $field['comments_limit'] : '0';
      $comments_order = (isset($field['comments_order'])) ? $field['comments_order'] : '0';
      $comments_status = (isset($field['comments_status'])) ? $field['comments_status'] : '0';

      $element = array(
        '#type' => 'commentreference_autocomplete',
        '#default_value' => isset($items[$delta]) ? $items[$delta] : NULL,
        '#value_callback' => 'commentreference_autocomplete_value',
        '#comments_from_node' => $comments_from_node,
        '#comments_limit' => $comments_limit,
        '#comments_order' => $comments_order,
        '#comments_status' => $comments_status,
      );
      break;
  }
  return $element;
}

/**
 * Value for a nodereference autocomplete element.
 *
 * Substitute in the node title for the node nid.
 */
function commentreference_autocomplete_value($element, $edit = FALSE) {
  $field_key  = $element['#columns'][0];
  if (!empty($element['#default_value'][$field_key])) {
    $cid = $element['#default_value'][$field_key];
    $value = db_result(db_query(db_rewrite_sql('SELECT c.subject FROM {comments} c WHERE c.cid = %d', 'c', 'cid', $cid), $cid));
    $value .= ' [cid:'. $cid .']';
    return array($field_key => $value);
  }
  return array($field_key => NULL);
}

/**
 * Process an individual element.
 *
 * Build the form element. When creating a form using FAPI #process,
 * note that $element['#value'] is already set.
 *
 * The $fields array is in $form['#field_info'][$element['#field_name']].
 */
function commentreference_select_process($element, $edit, $form_state, $form) {
  // The commentreference_select widget doesn't need to create its own
  // element, it can wrap around the optionwidgets_select element.
  // Add a validation step where the value can be unwrapped.
  $field_key  = $element['#columns'][0];
  $element[$field_key] = array(
    '#type' => 'optionwidgets_select',
    '#default_value' => isset($element['#value']) ? $element['#value'] : '',
    '#element_validate' => array('optionwidgets_validate', 'commentreference_select_validate'),

    // The following values were set by the content module and need
    // to be passed down to the nested element.
    '#field_name' => $element['#field_name'],
    '#delta' => $element['#delta'],
    '#columns' => $element['#columns'],
    '#title' => $element['#title'],
    '#required' => $element['#required'],
    '#description' => $element['#description'],
  );
  return $element;
}

/**
 * Process an individual element.
 *
 * Build the form element. When creating a form using FAPI #process,
 * note that $element['#value'] is already set.
 *
 */
function commentreference_autocomplete_process($element, $edit, $form_state, $form) {
  // The nodereference autocomplete widget doesn't need to create its own
  // element, it can wrap around the text_textfield element and add an autocomplete
  // path and some extra processing to it.
  // Add a validation step where the value can be unwrapped.
  $field_key  = $element['#columns'][0];

  // Special checking for default value on creation of field.
  $comments_from_node = $element['comments_from_node'] == '1' ? 'node' : 'all';
  $comments_limit = (isset($element['#comments_limit'])) ? $element['#comments_limit'] : '0';
  $comments_order = (isset($element['#comments_order'])) ? $element['#comments_order'] : '0';
  $comments_status = (isset($element['#comments_status'])) ? $element['#comments_status'] : '0';
  if (empty($comments_limit)) $comments_limit = '0';
  if (empty($comments_order)) $comments_order = '0';
  if (empty($comments_status)) $comments_status = '0';
  $node_id = arg(1);
  if (!is_numeric($node_id)) $node_id = '0';

  $element[$field_key] = array(
    '#type' => 'text_textfield',
    '#default_value' => isset($element['#value']) ? $element['#value'] : '',
    '#autocomplete_path' => 'commentreference/autocomplete/'. $element['#comments_from_node'] .'/'. $node_id .'/'. $comments_limit .'/'. $comments_order .'/'. $comments_status .'/'. $element['#field_name'],
    '#element_validate' => array('commentreference_autocomplete_validate'),

    // The following values were set by the content module and need
    // to be passed down to the nested element.
    '#field_name' => $element['#field_name'],
    '#delta' => $element['#delta'],
    '#columns' => $element['#columns'],
    '#title' => $element['#title'],
    '#required' => $element['#required'],
    '#description' => $element['#description'],
  );
  return $element;
}

/**
 * Validate an select element.
 *
 * Remove the wrapper layer and set the right element's value.
 */
function commentreference_select_validate($element, &$form_state) {
  $field_key  = $element['#columns'][0];
  array_pop($element['#parents']);
  form_set_value($element, $form_state['values'][$element['#field_name']][$field_key], $form_state);
}

/**
 * Validate an autocomplete element.
 *
 * Remove the wrapper layer and set the right element's value.
 */
function commentreference_autocomplete_validate($element, &$form_state) {
  $field_name = $element['#field_name'];
  $field = content_fields($field_name);
  $field_key  = $element['#columns'][0];
  $delta = $element['#delta'];
  $value = $element['#value'][$field_key];
  $cid = NULL;
  $comments_from_node = $element['#comments_from_node'];
  $comments_limit = (isset($element['comments_limit'])) ? $element['comments_limit'] : '0';
  $comments_order = (isset($element['comments_order'])) ? $element['comments_order'] : '0';
  $comments_status = (isset($element['comments_status'])) ? $element['comments_status'] : '0';
  $nid = arg(1);
  if (!empty($value)) {
    preg_match('/^(?:\s*|(.*) )?\[\s*cid\s*:\s*(\d+)\s*\]$/', $value, $matches);
    if (!empty($matches)) {
      // explicit nid
      list(, $title, $cid) = $matches;
      if (!empty($title) && ($c = _comment_load($cid)) && $title != $c->subject) {
        form_set_error($element[$field_key], t('%name : Title mismatch. Please check your selection.'), array('%name' => t($element[$field_key]['#title'])));
      }
    }
    else {
      // no explicit cid
      // TODO :
      // the best thing would be to present the user with an additional form,
      // allowing the user to choose between valid candidates with the same title
      // ATM, we pick the first matching candidate...
      $cids = _commentreference_potential_references($comments_from_node, $nide, $comments_limit, $comments_order, $comments_status, $field, FALSE, $value, TRUE);
      $cid = (!empty($cids)) ? array_shift(array_keys($cids)) : 0;
    }
  }
  form_set_value($element, $cid, $form_state);
  return $element;
}

/**
 * Implementation of hook_allowed_values().
 */
function commentreference_allowed_values($field) {
  $comments_from_node = ($field['comments_from_node'] == '1') ? 'node' : 'all';
  $comments_limit = (isset($field['comments_limit'])) ? $field['comments_limit'] : '0';
  $comments_order = (isset($field['comments_order'])) ? $field['comments_order'] : '0';
  $comments_status = (isset($field['comments_status'])) ? $field['comments_status'] : '0';
  $nid = arg(1);

  $options = _commentreference_potential_references($comments_from_node, $nid, $comments_limit, $comments_order, $comments_status, $field, TRUE);
  foreach ($options as $key => $value) {
    $options[$key] = _commentreference_item($field, $value);
  }
  if (!$field['required']) {
    $options = array(0 => '<'. t('none') .'>') + $options;
  }
  return $options;
}

/**
 * Fetch an array of all candidate referenced nodes,
 * for use in presenting the selection form to the user.
 */
function _commentreference_potential_references($type, $nid, $limit, $order, $status, $field, $return_full_nodes = FALSE, $string = '', $exact_string = FALSE) {
  $args = array();
  $where = array();

  // Status
  if ($status != '2') {
    $where[] = 'c.status = %d';
    $args[] = $status;
  }

  // Search
  if (isset($string)) {
    $string_clause = $exact_string ? "c.subject = '%s'" : "c.subject LIKE '%%%s%'";
    $where[] = $string_clause;
    $args[] = $string;
  }

  // Only select comments from node when editing and whey type == 'node'
  if ($type == 'node' && is_numeric($nid)) {
    $where[] = 'c.nid = %d';
    $args[] = $nid;
  }

  // Limit
  if (!empty($limit)) {
    $where[] = 'c.timestamp > %d';
    $limit_days = 3600 * 24 * $limit;
    $time = time() - $limit_days;
    $args[] = $time;
  }

  // Order
  $order_options = array(
    '0' => 'c.subject ASC',
    '1' => 'c.timestamp DESC',
    '2' => 'c.timestamp ASC'
  );
  $args[] = $order_options[$order];

  // Construct query
  if (!empty($where)) {
    $where_clause = ' WHERE '. implode(' AND ', $where);
  }
  $query =  "SELECT c.timestamp, c.cid, c.subject AS comment_title FROM {comments} c ". $where_clause ." ORDER BY %s";
  $result = db_query(db_rewrite_sql($query, 'c', 'cid', $args), $args);

  $rows = array();

  while ($comment = db_fetch_object($result)) {
    if ($return_full_nodes) {
      $rows[$comment->cid] = $comment;
    }
    else {
      $rows[$comment->cid] = $comment->comment_title;
    }
  }

  return $rows;
}

/**
 * Retrieve a pipe delimited string of autocomplete suggestions
 */
function commentreference_autocomplete($type, $nid, $limit, $order, $status, $field_name, $string = '') {
  $fields = content_fields();
  $field = $fields[$field_name];
  $matches = array();

  foreach (_commentreference_potential_references($type, $nid, $limit, $order, $status, $field, TRUE, $string) as $row) {
    $matches[$row->comment_title .' [cid:'. $row->cid .']'] = _commentreference_item($field, $row, FALSE);
  }
  drupal_json($matches);
}

function _commentreference_item($field, $item, $html = FALSE) {
  $output = theme('commentreference_item_simple', $item);
  $output = $html ? $output : check_plain($output);
  return $output;
}

function theme_commentreference_item_simple($item) {
  return format_date($item->timestamp, 'small') .' : '. $item->comment_title .' ('. $item->cid .')';
}

/**
 * FAPI theme for an individual elements.
 *
 * The textfield or select is already rendered by the
 * textfield or select themes and the html output
 * lives in $element['#children']. Override this theme to
 * make custom changes to the output.
 *
 * $element['#field_name'] contains the field name
 * $element['#delta]  is the position of this element in the group
 */
function theme_commentreference_select($element) {
  return $element['#children'];
}

function theme_commentreference_autocomplete($element) {
  return $element['#children'];
}
